{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport data from './patientData.json';\nclass IPatient {}\nexport let AppComponent = class AppComponent {\n  constructor() {\n    this.title = 'search';\n    this.patientData = {\n      '/': '',\n      '@': '',\n      '#': '',\n      $: ''\n    };\n    this.patientsData = data;\n    this.searchFieldValue = `${this.patientData['/']}${this.patientData['@']}${this.patientData['#']}${this.patientData['$']}`;\n  }\n  setSearchFieldValue() {\n    this.searchFieldValue = '';\n    console.log(this.patientData);\n    for (const key of Object.keys(this.patientData)) {\n      const value = this.patientData[key];\n      // Check if the value is not empty\n      if (value !== '') {\n        // Append the key and value to the searchFieldValue\n        this.searchFieldValue += `${key}${value}`;\n      } else {}\n    }\n  }\n  setFieldDataBasedSearch() {\n    const regex = /([/@#$])([^/@#$\\s]*)/g;\n    let match;\n    while (match = regex.exec(this.searchFieldValue)) {\n      this.patientData[match[1]] = match[2];\n    }\n  }\n  getSerchData() {\n    if (this.searchFieldValue) {\n      this.filterData = this.patientsData.filter(user => {\n        return (user.FirstName.toLowerCase().includes(this.patientData['/'].toLowerCase()) && user.LastName.toLowerCase().includes(this.patientData['@'].toLowerCase()) && user.ChartNo.toLowerCase().includes(this.patientData['#'].toLowerCase()) && user.Address1.toLowerCase().includes(this.patientData['$'].toLowerCase())).valueOf();\n      });\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","data","IPatient","AppComponent","constructor","title","patientData","$","patientsData","searchFieldValue","setSearchFieldValue","console","log","key","Object","keys","value","setFieldDataBasedSearch","regex","match","exec","getSerchData","filterData","filter","user","FirstName","toLowerCase","includes","LastName","ChartNo","Address1","valueOf","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\admin\\Desktop\\search-assignment\\search\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport data from './patientData.json';\n\nclass IPatient {\n  FirstName!: string;\n  LastName!: string;\n  ChartNo!: string;\n  Address1!: string;\n}\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'search';\n  patientData: { [key: string]: string } = {\n    '/': '',\n    '@': '',\n    '#': '',\n    $: '',\n  };\n  patientsData: IPatient[] = data;\n  filterData!: IPatient[];\n  searchFieldValue = `${this.patientData['/']}${this.patientData['@']}${this.patientData['#']}${this.patientData['$']}`;\n  constructor() {}\n\n  setSearchFieldValue(): void {\n    this.searchFieldValue = '';\n    console.log(this.patientData);\n    for (const key of Object.keys(this.patientData)) {\n      const value = this.patientData[key];\n      // Check if the value is not empty\n      if (value !== '') {\n        // Append the key and value to the searchFieldValue\n        this.searchFieldValue += `${key}${value}`;\n      } else {\n      }\n    }\n  }\n\n  setFieldDataBasedSearch(): void {\n    const regex = /([/@#$])([^/@#$\\s]*)/g;\n    let match;\n    while ((match = regex.exec(this.searchFieldValue))) {\n      this.patientData[match[1]] = match[2];\n    }\n  }\n\n  getSerchData(): void {\n    if (this.searchFieldValue) {\n      this.filterData = this.patientsData.filter((user: IPatient) => {\n        return (\n          user.FirstName.toLowerCase().includes(this.patientData['/'].toLowerCase()) &&\n          user.LastName.toLowerCase().includes(this.patientData['@'].toLowerCase()) &&\n          user.ChartNo.toLowerCase().includes(this.patientData['#'].toLowerCase()) &&\n          user.Address1.toLowerCase().includes(this.patientData['$'].toLowerCase())\n        ).valueOf();\n      });\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AAErC,MAAMC,QAAQ;AAWP,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YAAA;IAVA,KAAAC,KAAK,GAAG,QAAQ;IAChB,KAAAC,WAAW,GAA8B;MACvC,GAAG,EAAE,EAAE;MACP,GAAG,EAAE,EAAE;MACP,GAAG,EAAE,EAAE;MACPC,CAAC,EAAE;KACJ;IACD,KAAAC,YAAY,GAAeP,IAAI;IAE/B,KAAAQ,gBAAgB,GAAG,GAAG,IAAI,CAACH,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,EAAE;EACtG;EAEfI,mBAAmBA,CAAA;IACjB,IAAI,CAACD,gBAAgB,GAAG,EAAE;IAC1BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,WAAW,CAAC;IAC7B,KAAK,MAAMO,GAAG,IAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACT,WAAW,CAAC,EAAE;MAC/C,MAAMU,KAAK,GAAG,IAAI,CAACV,WAAW,CAACO,GAAG,CAAC;MACnC;MACA,IAAIG,KAAK,KAAK,EAAE,EAAE;QAChB;QACA,IAAI,CAACP,gBAAgB,IAAI,GAAGI,GAAG,GAAGG,KAAK,EAAE;OAC1C,MAAM,C;;EAGX;EAEAC,uBAAuBA,CAAA;IACrB,MAAMC,KAAK,GAAG,uBAAuB;IACrC,IAAIC,KAAK;IACT,OAAQA,KAAK,GAAGD,KAAK,CAACE,IAAI,CAAC,IAAI,CAACX,gBAAgB,CAAC,EAAG;MAClD,IAAI,CAACH,WAAW,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;;EAEzC;EAEAE,YAAYA,CAAA;IACV,IAAI,IAAI,CAACZ,gBAAgB,EAAE;MACzB,IAAI,CAACa,UAAU,GAAG,IAAI,CAACd,YAAY,CAACe,MAAM,CAAEC,IAAc,IAAI;QAC5D,OAAO,CACLA,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,GAAG,CAAC,CAACoB,WAAW,EAAE,CAAC,IAC1EF,IAAI,CAACI,QAAQ,CAACF,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,GAAG,CAAC,CAACoB,WAAW,EAAE,CAAC,IACzEF,IAAI,CAACK,OAAO,CAACH,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,GAAG,CAAC,CAACoB,WAAW,EAAE,CAAC,IACxEF,IAAI,CAACM,QAAQ,CAACJ,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACrB,WAAW,CAAC,GAAG,CAAC,CAACoB,WAAW,EAAE,CAAC,EACzEK,OAAO,EAAE;MACb,CAAC,CAAC;;EAEN;CACD;AA/CY5B,YAAY,GAAA6B,UAAA,EALxBhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWhC,YAAY,CA+CxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}