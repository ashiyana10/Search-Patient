{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as data from './patientData.json';\nexport let AppComponent = class AppComponent {\n  constructor() {\n    this.title = 'search';\n    this.patientData = {\n      '/': '',\n      '@': '',\n      '#': '',\n      $: ''\n    };\n    this.patientsData = data;\n    this.filterData = [{}];\n    this.searchFieldValue = `${this.patientData['/']}${this.patientData['@']}${this.patientData['#']}${this.patientData['$']}`;\n  }\n  setSearchFieldValue() {\n    this.searchFieldValue = '';\n    console.log(this.patientData);\n    for (const key of Object.keys(this.patientData)) {\n      const value = this.patientData[key];\n      // Check if the value is not empty\n      if (value !== '') {\n        // Append the key and value to the searchFieldValue\n        this.searchFieldValue += `${key}${value}`;\n      }\n    }\n  }\n  setFieldDataBasedSearch() {\n    const regex = /([/@#$])([^/@#$\\s]*)/g;\n    let match;\n    while ((match = regex.exec(this.searchFieldValue)) !== null) {\n      this.patientData[match[1]] = match[2];\n    }\n  }\n  getSerchData() {\n    this.filterData = this.patientsData.filter(user => {\n      return user.FirstName.includes(this.patientData['/']) || user.LastName.includes(this.patientData['@']) || user.ChartNo.includes(this.patientData['#']) || user.Address1.includes(this.patientData['$']);\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","data","AppComponent","constructor","title","patientData","$","patientsData","filterData","searchFieldValue","setSearchFieldValue","console","log","key","Object","keys","value","setFieldDataBasedSearch","regex","match","exec","getSerchData","filter","user","FirstName","includes","LastName","ChartNo","Address1","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\admin\\Desktop\\search-assignment\\search\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport * as data from './patientData.json';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'search';\n  patientData: { [key: string]: string } = {\n    '/': '',\n    '@': '',\n    '#': '',\n    $: '',\n  };\n  patientsData = data;\n  filterData=[{\n    \n  }]\n  searchFieldValue = `${this.patientData['/']}${this.patientData['@']}${this.patientData['#']}${this.patientData['$']}`;\n  constructor() {}\n\n  setSearchFieldValue(): void {\n    this.searchFieldValue = '';\n    console.log(this.patientData);\n    for (const key of Object.keys(this.patientData)) {\n      const value = this.patientData[key];\n      // Check if the value is not empty\n      if (value !== '') {\n        // Append the key and value to the searchFieldValue\n        this.searchFieldValue += `${key}${value}`;\n      }\n    }\n  }\n\n  setFieldDataBasedSearch(): void {\n    const regex = /([/@#$])([^/@#$\\s]*)/g;\n    let match;\n    while ((match = regex.exec(this.searchFieldValue)) !== null) {\n      this.patientData[match[1]] = match[2];\n    }\n  }\n\n  getSerchData():void{\n   this.filterData= this.patientsData.filter((user)=> {\n      return  user.FirstName.includes(this.patientData['/']) || user.LastName.includes(this.patientData['@']) || user.ChartNo.includes(this.patientData['#']) || user.Address1.includes(this.patientData['$'])\n    })\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAO,KAAKC,IAAI,MAAM,oBAAoB;AAOnC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAavBC,YAAA;IAZA,KAAAC,KAAK,GAAG,QAAQ;IAChB,KAAAC,WAAW,GAA8B;MACvC,GAAG,EAAE,EAAE;MACP,GAAG,EAAE,EAAE;MACP,GAAG,EAAE,EAAE;MACPC,CAAC,EAAE;KACJ;IACD,KAAAC,YAAY,GAAGN,IAAI;IACnB,KAAAO,UAAU,GAAC,CAAC,EAEX,CAAC;IACF,KAAAC,gBAAgB,GAAG,GAAG,IAAI,CAACJ,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,CAAC,EAAE;EACtG;EAEfK,mBAAmBA,CAAA;IACjB,IAAI,CAACD,gBAAgB,GAAG,EAAE;IAC1BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,WAAW,CAAC;IAC7B,KAAK,MAAMQ,GAAG,IAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACV,WAAW,CAAC,EAAE;MAC/C,MAAMW,KAAK,GAAG,IAAI,CAACX,WAAW,CAACQ,GAAG,CAAC;MACnC;MACA,IAAIG,KAAK,KAAK,EAAE,EAAE;QAChB;QACA,IAAI,CAACP,gBAAgB,IAAI,GAAGI,GAAG,GAAGG,KAAK,EAAE;;;EAG/C;EAEAC,uBAAuBA,CAAA;IACrB,MAAMC,KAAK,GAAG,uBAAuB;IACrC,IAAIC,KAAK;IACT,OAAO,CAACA,KAAK,GAAGD,KAAK,CAACE,IAAI,CAAC,IAAI,CAACX,gBAAgB,CAAC,MAAM,IAAI,EAAE;MAC3D,IAAI,CAACJ,WAAW,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;;EAEzC;EAEAE,YAAYA,CAAA;IACX,IAAI,CAACb,UAAU,GAAE,IAAI,CAACD,YAAY,CAACe,MAAM,CAAEC,IAAI,IAAG;MAC/C,OAAQA,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,IAAI,CAACpB,WAAW,CAAC,GAAG,CAAC,CAAC,IAAIkB,IAAI,CAACG,QAAQ,CAACD,QAAQ,CAAC,IAAI,CAACpB,WAAW,CAAC,GAAG,CAAC,CAAC,IAAIkB,IAAI,CAACI,OAAO,CAACF,QAAQ,CAAC,IAAI,CAACpB,WAAW,CAAC,GAAG,CAAC,CAAC,IAAIkB,IAAI,CAACK,QAAQ,CAACH,QAAQ,CAAC,IAAI,CAACpB,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1M,CAAC,CAAC;EACJ;CACD;AAzCYH,YAAY,GAAA2B,UAAA,EALxB7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACW9B,YAAY,CAyCxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}